<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Uchiha Dragon</title><subtitle>This is configured through the Chirpy theme</subtitle> <updated>2023-01-08T04:49:53+00:00</updated> <author> <name>Dragon</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2023 Dragon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>The Definition Of The Tree</title><link href="/posts/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" rel="alternate" type="text/html" title="The Definition Of The Tree" /><published>2023-01-07T16:07:00+00:00</published> <updated>2023-01-08T04:44:38+00:00</updated> <id>/posts/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id> <content src="/posts/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" /> <author> <name>Dragon</name> </author> <category term="Tree" /> <summary> 1.树的定义 树（Tree）：n（n≥0）个结点构成的有限集合 当 n=0 时，称为空树 1.特征 对于任一棵非空树（n＞0），它具备以下特征： 1)树中有个称为“根（Root）”的特殊结点，用 r 表示 2)其余结点可分为 m(m&amp;gt;0) 个互不相交的有限集 $T _1$ $T _2$…$T _m$ 3)子树是不相交的(数是非连通图) 4)除根结点外，每个结点有且仅有一个父结点(可以用族谱来理解，最上面的没有…，其他的有且仅有一个😄) 5)一棵 N 个结点的树有 N-1 条边(可以理解成除了根结点每个点都有一条向上的边) 2. 基本术语 1)结点的度（Degree）：结点的子树个数(每个点有几个儿子) 2)树的度：树的所有结点中最大的度数 3)叶结点（Leaf）：度为 0 的结点 4)父结点（Parent）：有子树的结点是其子树的根结点叫父结点 5)子结点（C... </summary> </entry> <entry><title>Queue</title><link href="/posts/%E9%98%9F%E5%88%97/" rel="alternate" type="text/html" title="Queue" /><published>2023-01-04T16:40:00+00:00</published> <updated>2023-01-08T04:49:34+00:00</updated> <id>/posts/%E9%98%9F%E5%88%97/</id> <content src="/posts/%E9%98%9F%E5%88%97/" /> <author> <name>Dragon</name> </author> <category term="Linear Structure" /> <summary> 队列 什么是队列 队列（QUeue）：具有一定操作约束的线性表——本质还是线性表 1.插入和删除操作：只在一端（front）做插入，而在另一端（rear）删除 2.插入数据：入队列（AddQ） 3.删除数据：出队列（DeleteQ） 4.后入先出：FIFO 队列的抽象数据类型描述 数据类型：队列（Queue） 数据对象集：一个有 0 个或多个元素的有穷线性表 操作集：长度为 MaxSize 的队列 Q ∈ Stack，队列元素 item ∈ ElementType 队列的基本操作主要有 Queue CreateQueue(int MaxSize)：生成长度为 MaxSize 的空队列 int IsFull(Queue Q)：判断队列 Q 是已满 void AddQ(Queue Q,ElementType item)：将数据元素 item 插入队列 Q 中 int... </summary> </entry> <entry><title>stack</title><link href="/posts/%E5%A0%86%E6%A0%88/" rel="alternate" type="text/html" title="stack" /><published>2023-01-04T16:40:00+00:00</published> <updated>2023-01-08T04:49:34+00:00</updated> <id>/posts/%E5%A0%86%E6%A0%88/</id> <content src="/posts/%E5%A0%86%E6%A0%88/" /> <author> <name>Dragon</name> </author> <category term="Linear Structure" /> <summary> 堆栈 什么是堆栈 堆栈（stack）：具有一定操作约束的线性表——本质还是线性表 1.只在一端（栈顶，Top）做插入、删除 2.插入数据：入栈（Push） 3.删除数据：出栈（Pop） 4.后入先出：Last In First Out（LIFO） 堆栈的抽象数据类型描述 数据类型：堆栈（stack） 数据对象集：一个有 0 个或多个元素的有穷线性表 操作集：长度为 MaxSize 的堆栈 S ∈ Stack，堆栈元素 item ∈ ElementType 堆栈的基本操作主要有 Stack CreateStack(int Maxsize):生成空堆栈，其最大长度为MaxSize int IsFull(Stack S,int MaxSize)：判断堆栈 S 是否已满 void Push(Stack S,ElementType item)：将元素 item 压入堆栈 in... </summary> </entry> <entry><title>List</title><link href="/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8/" rel="alternate" type="text/html" title="List" /><published>2023-01-04T15:00:00+00:00</published> <updated>2023-01-08T04:49:34+00:00</updated> <id>/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id> <content src="/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8/" /> <author> <name>Dragon</name> </author> <category term="Linear Structure" /> <summary> 线性表(维基百科) 1.什么是线性表 线性表：由同种类型数据元素构成的线性结构： 1.表中元素个数称为线性表的长度 2.线性表中没有元素时，称为空表 3.表的起始位置称为表头，表的结束位置称为表尾 //我认为线性表是最重要的线性结构，因为其他线性结构都是在线性表的基础上来实现的，掌握好线性表的相关操作，别的线性结构就hi很简单啦！！ 2.线性表的抽象数据结构类型描述 1.类型名称：线性表（List） 2.数据对象集：线性表是 n (≥0) 个元素构成的有序序列($a_1$,$a_2$,…,$a_n$) 3.操作集：线性表L∈List，整数i表示位置，元素X∈ElementType 线性表的基本操作有 List MakeEmpty():初始化一个空线性表 ElementType FindKth(int k,List L):根据序列k，返回相应元素 int Find(El... </summary> </entry> <entry><title>Basic Concepts Of Data Structures's Exercises</title><link href="/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/" rel="alternate" type="text/html" title="Basic Concepts Of Data Structures's Exercises" /><published>2023-01-03T08:17:00+00:00</published> <updated>2023-01-08T04:49:34+00:00</updated> <id>/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/</id> <content src="/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/" /> <author> <name>Dragon</name> </author> <category term="Linear Structure" /> <summary> #数据结构基本概念 本章课程比较简单而且比较抽象…主要是比较抽象，我就直接写课后题不写知识点了……. 题目1单链表逆转 本道题为函数体，我直接给出函数接口 List Reversr (List L){ List p,temp; P-&amp;gt;Next =NULL;//给p的指针域赋空作为链表尾部 while(L){ L-&amp;gt;Next=temp;//先处理第一个结点，就先把后面的结点都先存下来 L-&amp;gt;Next=p;//将第一个结点指向p p=L;//再将p指针变成头部 L=temp;//把预先保留的链表剩余部分赋回去 } return p;//进行完循环，p仍是指针头部，返回p即可 } 做链表题的时候可以通过画图来分析，图画出来，问题迎刃而解!! 下面给出我的图解... </summary> </entry> </feed>
